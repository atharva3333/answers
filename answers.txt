==========Practical 1 ===============

#include <iostream>
int gcd(int& a, int& b)
{
if(!a)
{
return b;
}
return (b % a , a);
}
int main() {
// Write C++ code here
int a = 10, b = 20;
std::cout << "GCD is : " << gcd(a, b);
return 0;
}


=============practical 2A ================

#include <iostream>
using namespace std;
string encrypt(string text, int s)
{
string result = "";
for (int i = 0; i < text.length(); i++)
{
if (isupper(text[i]))
result += char(int(text[i] + s - 65) % 26 + 65);
else
result += char(int(text[i] + s - 97) % 26 + 97);
}
return result;
}
int main() {
string text = "ATTACKATONCE";
int s = 4;
cout << "Text : " << text;
cout << "\nShift: " << s;
cout << "\nCipher: " << encrypt(text, s);
return 0;
}


==================practical 2B =========================



#include <iostream>
#include <string>

int main() {
    int i, f;
    char pop[100], c;
    
    std::cout << "Enter an encrypted text: ";
    std::cin.getline(pop, 100);
    
    std::cout << "Enter key: ";
    std::cin >> f;
    
    for (i = 0; pop[i] != '\0'; i++) {
        c = pop[i];
        if (c >= 'a' && c <= 'z') {
            c = c - f;
            if (c < 'a') {
                c = c + 'z' - 'a' + 1;
            }
            pop[i] = c;
        } else if (c >= 'A' && c <= 'Z') {
            c = c - f;
            if (c < 'A') {
                c = c + 'Z' - 'A' + 1;
            }
            pop[i] = c;
        }
    }
    
    std::cout << "Decrypted message: " << pop << std::endl;
    
    return 0;
}


===============practical 3A =================

#include <bits/stdc++.h>
using namespace std;
string encryptRailFence(string text, int key)
{
char rail[key][(text.length())];
for (int i=0; i < key; i++)
for (int j = 0; j < text.length(); j++)
rail[i][j] = '\n';
bool dir_down = false;
int row = 0, col = 0;
for (int i=0; i < text.length(); i++)
{
if (row == 0 || row == key-1)
dir_down = !dir_down;
rail[row][col++] = text[i];
dir_down?row++ : row--;
}
string result;
for (int i=0; i < key; i++)
for (int j=0; j < text.length(); j++)
if (rail[i][j]!='\n')
result.push_back(rail[i][j]);
return result;
}
int main()
{
cout<<"Enter Plain text\n";
string text;
cin>>text;
cout <<"Enter key\n";
int key;
cin>>key;
cout<<"Encrypted text\t"<<encryptRailFence(text , key);
return 0;
}


=================practical 3B =========================

#include <bits/stdc++.h>
using namespace std;
string decryptRailFence(string cipher, int key)
{
char rail[key][cipher.length()];
for (int i=0; i < key; i++)
for (int j=0; j < cipher.length(); j++)
rail[i][j] = '\n';
bool dir_down;
int row = 0, col = 0;
for (int i=0; i < cipher.length(); i++)
{
if (row == 0)
dir_down = true;
if (row == key-1)
dir_down = false;
rail[row][col++] = '*';
dir_down?row++ : row--;
}
int index = 0;
for (int i=0; i<key; i++)
for (int j=0; j<cipher.length(); j++)
if (rail[i][j] == '*' && index<cipher.length())
rail[i][j] = cipher[index++];
string result;
row = 0, col = 0;
for (int i=0; i< cipher.length(); i++)
{
if (row == 0)
dir_down = true;
if (row == key-1)
dir_down = false;
if (rail[row][col] != '*')
result.push_back(rail[row][col++]);
dir_down?row++: row--;
}
return result;
}
int main()
{
cout<<"Enter Plain text\n";
string text;
cin>>text;
cout <<"Enter key\n";
int key;
cin>>key;
cout<<"Decrypted text\t"<<decryptRailFence(text , key);
return 0;
}

=====================practical 4 ============================

#include<bits/stdc++.h>
using namespace std;
int main()
{
double p = 3;
double q = 7;
double n = p* q;
double e = 2;
double phi = (p - 1) * (q - 1);
while(e < phi)
{
if(__gcd((int)e , (int)phi) == 1)
{
break;
}
else{
++e;
}
}
double k = 2;
double d = (1 + (k * phi)) / e;
double msg = 12;
cout<<"Message is : 12"<<endl;
double c = fmod(pow(msg , e) , n);
cout<<"Encrypted msg\t"<<c<<endl;
double m = fmod(pow(c , d) , n);
cout<<"Decrypted Text\t"<<m<<endl;
return 0;
}


====================practical 5 ========================

#include <cmath>
#include <iostream>
using namespace std;
long long int power(long long int a, long long int b,
long long int P)
{
if (b == 1)
return a;
else
return (((long long int)pow(a, b)) % P);
}
int main()
{
long long int P, G, x, a, y, b, ka, kb;
P = 23;
cout << "The value of P : " << P << endl;
G = 9;
cout << "The value of G : " << G << endl;
a = 4;
cout << "The private key a for A : " << a << endl;
x = power(G, a, P);
b = 3;
cout << "The private key b for B : " << b << endl;
y = power(G, b, P);
ka = power(y, a, P);
kb = power(x, b, P);
cout << "Secret key for the A is : " << ka << endl;
cout << "Secret key for the B is : " << kb << endl;
return 0;
}


===========practical 6 ========================


************FOR ONLINE COMPILER****************

def letter_frequency(text, letter):
    return text.count(letter)

text = '''Cricket is a bat-and-ball game that is played between two teams of eleven players 
on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, 
each comprising two bails balanced on three stumps. Two players from the batting team 
(the striker and nonstriker) stand in front of either wicket, with one player from the fielding 
team (the bowler) bowling the ball towards the striker's wicket from the opposite end of the pitch.
 The striker's goal is to hit the bowled ball and then switch places with the nonstriker, 
with the batting team scoring one run for each exchange. Runs are also scored when the ball 
reaches or crosses the boundary of the field or when the ball is bowled illegally.''' 
  
print(letter_frequency(text, 'a'))


*********For offline****************

def letterFrequency(fileName, letter):
    file = open(fileName, 'r')
    text = file.read()
    return text.count(letter)

print("The frequency of the letter 'i' in the given file is: ")
print(letterFrequency('C:/Users/Hp/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python 3.11/a.txt', 'i'))


====================Practical 7 ==================================


#include <iostream>
#include <cstring>

#define SIZE 1000

char* base64Encoder(const char input_str[], int len_str) {
    char char_set[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    char *res_str = new char[SIZE];
    int index, no_of_bits = 0, padding = 0, val = 0, count = 0, temp;
    int i, j, k = 0;
    for (i = 0; i < len_str; i += 3) {
        val = 0, count = 0, no_of_bits = 0;
        for (j = i; j < len_str && j <= i + 2; j++) {
            val = val << 8;
            val = val | input_str[j];
            count++;
        }
        no_of_bits = count * 8;
        padding = no_of_bits % 3;
        while (no_of_bits != 0) {
            if (no_of_bits >= 6) {
                temp = no_of_bits - 6;
                index = (val >> temp) & 63;
                no_of_bits -= 6;
            } else {
                temp = 6 - no_of_bits;
                index = (val << temp) & 63;
                no_of_bits = 0;
            }
            res_str[k++] = char_set[index];
        }
    }
    for (i = 1; i <= padding; i++) {
        res_str[k++] = '=';
    }
    res_str[k] = '\0';
    return res_str;
}

int main() {
    const char input_str[] = "MENON";
    int len_str;
    len_str = strlen(input_str);
    std::cout << "Input string: " << input_str << std::endl;
    char *encoded_str = base64Encoder(input_str, len_str);
    std::cout << "Encoded string: " << encoded_str << std::endl;
    delete[] encoded_str; // Don't forget to free the memory
    return 0;
}


